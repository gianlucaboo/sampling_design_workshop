---
title: "Workshop on Advanced Sampling Methodologies"
author: "Eart Observation data for sampling"
institute: "Dr. Gianluca Boo, WorldPop, University of Southampton"
date: "09-17-2025"
title-slide-attributes:
  data-background-image: "wp.png"
  data-background-size: "3.2em"
  data-background-position: "90% 10%"
format:
  revealjs: 
    slide-number: true
    incremental: false
    theme: [default, wp_style.scss]
editor: visual
toc: false
toc-title: "Content"
---

## Previously covered

- Introduction to R and RStudio  
- Data types and data structures  
- Importing data  
- Data manipulation and visualization (`tidyverse`)  
- Saving and closing sessions  

------------------------------------------------------------------------

## Agenda

- Spatial data in R  
- Vector data: points, lines, polygons  
- Raster data: grids  
- Packages: `sf` and `terra`  
- Reading and visualising spatial data  
- Simple spatial operations  
- Summarising raster data within polygons  
- Visualisation examples  

------------------------------------------------------------------------

## Spatial data in R

- Two main types:  
  - **Vector**: points, lines, polygons  
  - **Raster**: regular grids with values  
- R packages:  
  - **`sf`**: modern vector handling  
  - **`terra`**: raster analysis  
- Both integrate well with `ggplot2` for visualisation  

------------------------------------------------------------------------

## Vector data types

::::: columns
::: {.column width="60%"}
- **Points**: single locations (e.g., cities, schools)  
- **Lines**: sequences of points (e.g., roads, rivers)  
- **Polygons**: areas (e.g., administrative boundaries)  
:::
::: {.column width="40%"}
![](img/vector_types.png){width="350"}
:::
:::::

------------------------------------------------------------------------

## Raster data

::::: columns
::: {.column width="60%"}
- Gridded data with values (e.g., elevation, population density)  
- Resolution determined by **cell size**  
:::
::: {.column width="40%"}
![](img/raster_example.png){width="350"}
:::
:::::

------------------------------------------------------------------------

## Reading vector data with `sf`

```r
library(sf)

# Read shapefile or GeoPackage
villages <- st_read("data/villages.gpkg")

# Inspect
villages
plot(villages["population"])
```

## Reading raster data with terra

```r

library(terra)

# Read raster (GeoTIFF)
elev <- rast("data/elevation.tif")

# Inspect
elev
plot(elev)
```

## Coordinate Reference Systems (CRS)
``` r
st_crs(villages)
crs(elev)

# Align CRS
villages <- st_transform(villages, crs(elev))
```

## Basic spatial operations with sf
``` r
# Select villages inside a polygon
villages_in_area <- villages[polygon, ]

# Buffer 5km around villages
villages_buffer <- st_buffer(villages, dist = 5000)
```

## Summarising raster values within polygons
``` r
# Average elevation per polygon
elev_mean <- terra::extract(elev, villages, fun = mean, na.rm = TRUE)
villages$mean_elev <- elev_mean[,2]

plot(villages["mean_elev"])
```

## Vector map example
``` r
library(ggplot2)
library(sf)

# Example vector dataset: nc polygons
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)

# Line: connect first 3 centroids
line_coords <- st_coordinates(st_centroid(nc[1:3, ]))
example_line <- st_sfc(st_linestring(line_coords)) |> st_sf()

# Plot
ggplot() +
  geom_sf(data = nc, fill = "lightblue", color = "black", alpha = 0.3) +
  geom_sf(data = nc[1,], fill = "orange", color = "red", alpha = 0.5) +
  geom_sf(data = example_line, color = "darkgreen", size = 1.5) +
  geom_sf(data = st_centroid(nc[1:5, ]), color = "purple", size = 3) +
  ggtitle("Vector data: Points, Line, Polygon")
```

## Raster map example with ggplot2
``` r 
library(terra)
library(ggplot2)

# Load example raster
elev <- rast(system.file("ex/elev.tif", package="terra"))

# Convert to data frame
elev_df <- as.data.frame(elev, xy = TRUE)
colnames(elev_df) <- c("x", "y", "elevation")

# Plot
ggplot(elev_df) +
  geom_raster(aes(x = x, y = y, fill = elevation)) +
  scale_fill_viridis_c() +
  coord_equal() +
  labs(title = "Raster Elevation Map", fill = "Elevation")
```

------------------------------------------------------------------------

## Google Earth Engine (GEE) - Introduction

- **Cloud-based platform** for planetary-scale environmental data analysis  
- **No need to download massive datasets locally**  
- Access to a variety of pre-processed datasets including:  
  - **Satellite imagery:** Landsat, Sentinel-2, MODIS  
  - **Climate data:** ERA5, CHIRPS precipitation  
  - **Land cover and vegetation:** Copernicus, GlobCover, NDVI indices  
  - **Topography:** SRTM, ASTER DEM  
  - **Socioeconomic:** Population density, night-time lights  
- Works with **JavaScript** in the browser or **Python / R APIs**

------------------------------------------------------------------------

## Google Earth Engine - Accessing the Code Editor

- Open **[GEE Code Editor](https://code.earthengine.google.com/)**  
- **Step-by-step:**  
  1. Sign in with a Google account  
  2. Click **New Script**  
  3. Use the **search bar** to find datasets  
  4. Load the dataset with `ee.ImageCollection` or `ee.Image`  
  5. Use **filters** (e.g., date, location, bands)  
  6. Display results with `Map.addLayer()`  
  7. Export data with `Export.image.toDrive()` or `Export.table.toDrive()`

------------------------------------------------------------------------

## Google Earth Engine - Example Script

```javascript
// Example: extract mean NDVI for a region in 2020
var roi = ee.Geometry.Rectangle([34.5, -1.5, 35.5, -0.5]);
var collection = ee.ImageCollection('MODIS/006/MOD13Q1')
                  .filterBounds(roi)
                  .filterDate('2020-01-01', '2020-12-31')
                  .select('NDVI');

var mean_ndvi = collection.mean();
Map.centerObject(roi);
Map.addLayer(mean_ndvi, {min:0, max:9000, palette: ['white','green']}, 'Mean NDVI');

// Export to Google Drive
Export.image.toDrive({
  image: mean_ndvi,
  description: 'mean_ndvi_2020',
  scale: 250,
  region: roi
});
```

## Downloading data from GEE

Use Export.image.toDrive() to save a GeoTIFF

Options:

Scale: spatial resolution (meters per pixel)

Region: area of interest (polygon)

CRS: coordinate reference system

Format: GeoTIFF for rasters, CSV/GeoJSON for tables

After export, download the file from Google Drive

## Reading GEE 
``` r 
library(terra)
library(sf)

# Load polygon boundaries
polygons <- st_read("data/villages.gpkg")

# Load GEE-exported raster (GeoTIFF)
ndvi_raster <- rast("data/mean_ndvi_2020.tif")

# Align CRS
polygons <- st_transform(polygons, crs(ndvi_raster))

# Extract mean NDVI per polygon
ndvi_mean <- terra::extract(ndvi_raster, polygons, fun = mean, na.rm = TRUE)
polygons$mean_ndvi <- ndvi_mean[,2]

# Plot results
library(ggplot2)
ggplot(polygons) +
  geom_sf(aes(fill = mean_ndvi)) +
  scale_fill_viridis_c() +
  ggtitle("Mean NDVI per Polygon from GEE")

```

## Take home

-  Spatial data: vector (sf) vs raster (terra)

-  Always check CRS before analysis

-  Use sf for points, lines, polygons

-  Use terra for raster analysis

-  Combine rasters and vectors for summaries and plots

## Resources

-  sf docs: https://r-spatial.github.io/sf/

-  terra docs: https://rspatial.org/terra/

-  Geocomputation with R: https://geocompr.robinlovelace.net/

-  RStudio Spatial Cheat Sheets: https://posit.co/resources/cheatsheets/
